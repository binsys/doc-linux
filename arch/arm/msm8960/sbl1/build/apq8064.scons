#===============================================================================
#
# SBL1 build script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright 2009-2012 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/core/boot/scons/main/latest/target/msm8960/src/bsp/bootloaders/sbl1/build/SConscript#3 $
#  $DateTime: 2011/03/25 17:59:34 $
#  $Author: shirleyy $
#  $Change: 1673282 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# YYYY-MM-DD       who     what, where, why
# --------------   ---     ---------------------------------------------------------
# 2012-04-03       plc     Use correct boot_pbl_v4.h
# 2012-03-27       plc     Add support for FLCB
# 2012-03-16       plc     Add more appropriate macro
# 2012-01-16       kpa     Fix RVCT compiler check.
# 2011-12-05       sy      Adding SHORT_BUILDPATH to enable compiling in same flavor but different folder
# 2011-10-21       sy      Adding Prng driver
# 2011-09-25       plc     Fix Tools usage
# 2011-09-01       plc     Initial release
# 2011-09-13       plc     Fix Tools usage
#
#===============================================================================
import os
Import('env')

env = env.Clone()

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias first alias is always the target then the other possibles aliases
aliases = [
   'sbl1','boot','cbsp','cbsp_modem','all'
]

env.InitImageVars(
   alias_list = aliases,               	# list of aliases, unique name index [0]
   proc = 'arm7',                      	# proc settings
   config = 'apps',                   	# config settings
   build_tags = [                       # list of build tags for sub lib scripts
   'SBL1_BOOT',
   'EMMC_BOOT_DRIVER',
   'ERR_STUBS_BOOT_DRIVER',
   #'AUTH_BOOT_DRIVER',
   'UTILS_BOOT_DRIVER',
   'BUSYWAIT_BOOT_DRIVER',
   'SSBI_MINI_BOOT_DRIVER',
   'CLOCK_RPM_BOOT_DRIVER',
   'PMIC_MINI_BOOT_DRIVER',
   'CE_REGHASH_BOOT_DRIVER',
   'DAL_DEVCFG_IMG',
   'USB_FLCB_BOOT_DRIVER'],
   deprecated_build_tags = ['RPMSBL_BOOT_IMAGE', 'SBL1_BOOT_IMAGE'],
   tools = [
   '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py', 
   '${BUILD_ROOT}/core/bsp/build/scripts/bin_builder.py', 
   '${BUILD_ROOT}/core/bsp/build/scripts/hex_builder.py', 
   '${BUILD_ROOT}/core/bsp/build/scripts/scl_builder.py',
   '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
   'buildspec_builder.py']
)


if not env.CheckAlias():
   Return()

#------------------------------------------------------------------------------
# Init defualt values for this PROC/Image
#------------------------------------------------------------------------------

# add environment variables
env.Replace(BUILD_BOOT_CHAIN = 'yes')
env.Replace(BUILD_SDCC_MINIMIZED_API = 'yes')
env.Replace(USES_HOTPLUG_WITHOUT_EFS = 'yes')
env.Replace(USES_FS_HOTPLUG_SD = 'yes')
env.Replace(USES_DEVCFG = 'yes')

#===============================================================================
# BOOT/SBL1 build rules
#===============================================================================

#------------------------------------------------------------------------------
# configure and load in uses and path variables,
#------------------------------------------------------------------------------
env.InitBuildConfig()

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
env.LoadToolScript('rvct', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('apps_defs', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])

# After loading default rules, make some optimization changes
env.Replace(ARMLD_NOREMOVE_CMD = "")
env.Replace(CC = env['ARMCC'])
env.Replace(ARMCC_OPT = "${ARM_OPT_SPACE} ${ARM_OPT_2}")
env.Replace(ARMCC_CODE = "${ARM_END} ${ARM_NO_UNALIGNED_ACCESS} ${ARM_SPLIT_SECTIONS} --diag_suppress=2523")
env.Append(ARMCXX_CODE = " ${ARM_NO_UNALIGNED_ACCESS}")
env.Append(ASFLAGS = " ${ARM_NO_UNALIGNED_ACCESS}")
#------------------------------------------------------------------------------
# Check RVCT compiler sub version. If the version is not higher than P713, exit 
#------------------------------------------------------------------------------

rvct_command = env.subst("$ARMCC")+ " --version_number"
rvct_stdout_handle = os.popen(rvct_command, "r")
rvct_compiler_version = rvct_stdout_handle.read()
rvct_stdout_handle.close()

# rvct compiler versions 3.1 up support version_number option. rvct2.x and below will return
# error upon running version number check, resulting in empty rvct_compiler_version.
if ((rvct_compiler_version == "") or (int(rvct_compiler_version) < 410713)):
      env.PrintError("-------------------------------------------------------------------------------")
      env.PrintError("8064  Bootloader must use RVCT41P713 or higher revision.")
      env.PrintError("-------------------------------------------------------------------------------")
      raise RuntimeError, "ARM compiler is not expected version."

#------------------------------------------------------------------------------
# Add extension flags for SBL1
#------------------------------------------------------------------------------
if env['BUILD_VER'] == "":
   env.Replace(BUILD_VER = '0')

env.Append(CPPDEFINES = [
   "FEATURE_ARM7",
   "__TARGET_CPU_ARM7TDMI_S",
   "BOOT_LOADER",
   "BOOT_WATCHDOG_DISABLED",
   "BOOT_PBL_H=\\\"boot_pbl_v4.h\\\"",
   "BOOT_TARGET_H=\\\"sbl1_target.h\\\"",
   "BUILD_BOOT_CHAIN",
   "DAL_BOOT_IMAGE_SBL1",
   "STACK_PTR_ADDR=\\\"SCL_SBL1_STACK_BASE-SCL_SBL1_STACK_SIZE\\\"",
   "DAL_CONFIG_IMAGE_BOOT",
   "DAL_CONFIG_TARGET_ID=0x${MSM_ID}",
   "DAL_CONFIG_IMAGE_SBL1",
])

#***Change USES_BOOT_NAND_BOOT to USES_NAND_BOOT to use common .builds flag
if 'USES_BOOT_NAND_BOOT' in env:
   env.Append(CPPDEFINES = [
       "FEATURE_BOOT_NAND_BOOT",
   ])

if 'USES_SDCC_BOOT' in env:
   env.Append(CPPDEFINES = [
       "FEATURE_BOOT_SDCC_BOOT",
   ])

if 'USES_SECBOOT_QDST' in env:
   env.Append(CPPDEFINES = [
       "FEATURE_QDST_SECBOOT",
   ])

if 'USES_PRE_SILICON_STUB_CLK_REGIME' in env:
   env.Append(CPPDEFINES = [
       "FEATURE_STUB_CLK_REGIME",
   ])

if 'USES_PRE_SILICON_NEW_8064_REGS' in env:
   env.Append(CPPDEFINES = [
       "FEATURE_STUB_OBSOLETE_REGS",
       "FEATURE_NEW_8064_REGS",
   ])

#------------------------------------------------------------------------------
# Decide which build steps to perform
#------------------------------------------------------------------------------
# regular build steps (no filter) is build everything, once a user start 
# using filters we have to make decisions depending on user input.
# The LoadAUSoftwareUnits function will take care of filtering subsystem, units, 
# etc. This is to take care of what steps to enable disable from the top level
# script, such as building files specify in this script i.e. quartz, stubs, etc.
do_local_files = True
do_link = True
do_post_link = True

# get user input from command line
filter_opt = env.get('FILTER_OPT')

# Limit build processing base on filter option
if filter_opt is not None:
   do_link = False
   do_post_link = False

   if not env.FilterMatch(os.getcwd()):
      do_local_files = False

#-------------------------------------------------------------------------------
# Libraries Section
#-------------------------------------------------------------------------------

core_libs, core_objs = env.LoadAUSoftwareUnits('core')
modem_libs, modem_objs = env.LoadAUSoftwareUnits('modem', 'rfa/pmic')
sbl1_units = [core_objs, core_libs, modem_libs, modem_objs]


if do_local_files:

   #----------------------------------------------------------------------------
   # SBL1 Environment
   #----------------------------------------------------------------------------
   
   #----------------------------------------------------------------------------
   # Beging building SBL1
   #----------------------------------------------------------------------------
   env.Replace(SBL1_ROOT = "${COREBSP_ROOT}/boot/secboot3/hw/${CHIPSET}/sbl1")
   
   # Add boot API for scl builder
   env.RequireRestrictedApi(['BOOT'])
   
   #----------------------------------------------------------------------------
   # Generate Scatter Load File (SCL)
   #----------------------------------------------------------------------------
   target_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}', 
      '${SBL1_ROOT}/sbl1.scl')

   sbl1_units.extend(target_scl)	  

if do_link:
   #----------------------------------------------------------------------------
   # Generate sbl1 elf
   #----------------------------------------------------------------------------
   libs_path = env['INSTALL_LIBPATH']
   
   SBL1_elf = env.Program('${SHORT_BUILDPATH}/${TARGET_NAME}', source=[core_objs, modem_objs], LIBS=[core_libs, modem_libs], LIBPATH=libs_path)
 
   env.Depends(SBL1_elf, target_scl)

   SBL1_map = env.SideEffect(env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.map'), SBL1_elf)
   SBL1_sym = env.SideEffect(env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.sym'), SBL1_elf)
   

if do_post_link:   
   #----------------------------------------------------------------------------
   # Generate sbl1 bin
   #----------------------------------------------------------------------------
   SBL1_bin = env.BinBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}', SBL1_elf)

   #----------------------------------------------------------------------------
   # Generate sbl1 mbn
   #----------------------------------------------------------------------------
   SBL1_mbn = env.MbnBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}', SBL1_bin, 
      IMAGE_TYPE="sbl1", FLASH_TYPE="sdcc", ENABLE_ENCRYPT=True)
      
   SBL1_product= env.BuildProductsFile('${SHORT_BUILDPATH}/${TARGET_NAME}',SBL1_mbn)
   
   #----------------------------------------------------------------------------
   # Install generated files for debugging
   #----------------------------------------------------------------------------
   
   install_dbg_files = Install(env.subst("${SBL1_ROOT}"),
      [SBL1_elf, SBL1_map, SBL1_sym, SBL1_bin])

   #============================================================================
   # Define units that will be build
   #============================================================================
   sbl1_units = env.Alias ('arm7_sbl1_units', [
      SBL1_elf,
      SBL1_bin,
      SBL1_product,
      install_dbg_files,
   ])

# add aliases
for alias in aliases:
   env.Alias(alias, sbl1_units)
